substitutions:
  mq7_name: "MQ7"
  mq7_id: "mq7"
  # Both pins are 3.3V compatible and can be directly connected to the ESP
  mq7_heater_pin: "8"
  mq7_analog_pin: "0"
  # Voltage divider values
  mq7_low_side_resistor: "1000"
  mq7_high_side_resistor: "510"
  mq7_supply_voltage: "4.85V"
  # Temperature / Humidity Compensation
  # replace "temperature" with the id of your temperature sensor (celsius) and "humidity" with the id of your humidity sensor
  temperature_sensor_id: bme280_temp
  humidity_sensor_id: bme280_hum
  pressure_sensor_id: bme280_press
  # Calibration: place the sensor in clean air (outdoor) for a few hours and use the value of mq7_compensated_resistance
  mq7_clean_air_compensated_resistance: "55000"

interval:
  - interval: 150s
    then:
      - switch.turn_on: ${mq7_id}_heater
      - logger.log: "${mq7_name}: The sensor is heating!"
      - delay: 55s
      - switch.turn_off: ${mq7_id}_heater
      - logger.log: "${mq7_name}: The sensor is measuring!"
      - delay: 90s
      - if:
          condition:
            - switch.is_off: ${mq7_id}_heater
          then:
            - component.update: ${mq7_id}_raw
            - logger.log: "${mq7_name}: Done"
            - switch.turn_on: ${mq7_id}_heater
            - delay: 5s

output:
  # MQ-7 heater GPIO pin
  - platform: gpio
    pin: ${mq7_heater_pin}
    id: ${mq7_id}_heater_pin

switch:
  - platform: output
    name: "${mq7_name} Heater"
    icon: mdi:fire
    entity_category: diagnostic
    disabled_by_default: True
    id: ${mq7_id}_heater
    output: ${mq7_id}_heater_pin

sensor:
  # MQ-7
  - platform: adc
    id: ${mq7_id}_raw
    name: "${mq7_name} Voltage"
    entity_category: diagnostic
    disabled_by_default: True
    pin: ${mq7_analog_pin}
    attenuation: auto
    update_interval: never
  - platform: resistance
    id: ${mq7_id}_resistance
    name: "${mq7_name} Resistance"
    icon: mdi:omega
    entity_category: diagnostic
    disabled_by_default: True
    sensor: ${mq7_id}_raw
    configuration: UPSTREAM
    resistor: ${mq7_low_side_resistor}
    reference_voltage: ${mq7_supply_voltage}
    filters:
      - lambda: return (x - ${mq7_high_side_resistor});
    on_value:
      then:
        - component.update: ${mq7_id}_compensated_resistance
  - platform: template
    id: ${mq7_id}_compensated_resistance
    name: "${mq7_name} Compensated Resistance"
    icon: mdi:omega
    entity_category: diagnostic
    unit_of_measurement: Î©
    lambda: |-
      return (id(${mq7_id}_resistance).state / ( -0.01223333 * id(${temperature_sensor_id}).state -0.00609615 * id(${humidity_sensor_id}).state + 1.70860897));
    update_interval: never
    on_value:
      then:
        - component.update: ${mq7_id}_ratio
  - platform: template
    id: ${mq7_id}_ratio
    name: "${mq7_name} Ratio"
    icon: mdi:percent
    entity_category: diagnostic
    disabled_by_default: True
    unit_of_measurement: "%"
    lambda: |-
        return 100.0 * (id(${mq7_id}_compensated_resistance).state / ${mq7_clean_air_compensated_resistance});
    update_interval: never
    on_value:
      then:
        - component.update: ${mq7_id}_co
  - platform: template
    id: ${mq7_id}_co
    name: "${mq7_name} Carbon Monoxide"
    unit_of_measurement: "ppm"
    device_class: carbon_monoxide
    lambda: |-
      auto ratio_ln = log(id(${mq7_id}_ratio).state / 100.0);
      return exp(-0.685204 - 2.67936 * ratio_ln - 0.488075 * ratio_ln * ratio_ln - 0.07818 * ratio_ln * ratio_ln * ratio_ln);
    update_interval: never
